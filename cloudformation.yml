AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS code pipeline / code deploy example
Parameters:
  SourceS3BucketName:
    Description: S3 bucket name for project
    Type: String
    Default: 'tddtrainingapplication'
  GitHubRepo:
    Description: GitHub repo URL
    Type: String
    Default: 'TDDTrainingApplication'
  GitHubOwner:
    Description: GitHub owner
    Type: String
  GitHubOauthToken:
    Description: GitHub oauth
    Type: String
  GitBranch:
    Description: Git branch
    Type: String
    Default: 'aws-deploy'

Resources:

 CodePipelineIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal: {Service: [codepipeline.amazonaws.com]}
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'cloudformation:*'
                - 'codebuild:*'
                - 'iam:PassRole'
                - 'lambda:*'
                Effect: Allow
                Resource: '*'

 CodeBuildServiceRole:
     Type: AWS::IAM::Role
     Properties:
       Path: /
       AssumeRolePolicyDocument: |
         {
             "Statement": [{
                 "Effect": "Allow",
                 "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                 "Action": [ "sts:AssumeRole" ]
             }]
         }
       Policies:
         - PolicyName: root
           PolicyDocument:
             Version: 2012-10-17
             Statement:
               - Resource: "*"
                 Effect: Allow
                 Action:
                   - logs:CreateLogGroup
                   - logs:CreateLogStream
                   - logs:PutLogEvents
                   - ecr:GetAuthorizationToken
               - Resource: !Sub arn:aws:s3:::${SourceS3BucketName}/*
                 Effect: Allow
                 Action:
                   - s3:GetObject
                   - s3:PutObject
                   - s3:GetObjectVersion

 AppPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt [CodePipelineIAMRole, Arn]
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
              - Name: TddTrainingApplicationSource
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubOauthToken
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: Build
              InputArtifacts:
                -
                  Name: TddTrainingApplicationSource
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                -
                  Name: TddTrainingApplicationSourceBuild
              Configuration:
                ProjectName: !Ref TDDTrainingApplicationCodeBuild
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location: !Ref SourceS3BucketName

 TDDTrainingApplicationCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TDDTrainingApplication
      Description: A description about my project
      ServiceRole: !GetAtt [CodeBuildServiceRole, Arn]
      Artifacts:
        Location: !Ref SourceS3BucketName
        Type: "S3"
      Source:
        Location: !Sub ${SourceS3BucketName}/source.zip
        Type: "S3"
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/java:openjdk-8
      TimeoutInMinutes: 10